// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: protos/webpage.proto

package say_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PageClient is the client API for Page service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageClient interface {
	PublishSuperPage(ctx context.Context, in *SuperPage, opts ...grpc.CallOption) (*Result, error)
}

type pageClient struct {
	cc grpc.ClientConnInterface
}

func NewPageClient(cc grpc.ClientConnInterface) PageClient {
	return &pageClient{cc}
}

func (c *pageClient) PublishSuperPage(ctx context.Context, in *SuperPage, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/webpage.Page/PublishSuperPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageServer is the server API for Page service.
// All implementations must embed UnimplementedPageServer
// for forward compatibility
type PageServer interface {
	PublishSuperPage(context.Context, *SuperPage) (*Result, error)
	mustEmbedUnimplementedPageServer()
}

// UnimplementedPageServer must be embedded to have forward compatible implementations.
type UnimplementedPageServer struct {
}

func (UnimplementedPageServer) PublishSuperPage(context.Context, *SuperPage) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishSuperPage not implemented")
}
func (UnimplementedPageServer) mustEmbedUnimplementedPageServer() {}

// UnsafePageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageServer will
// result in compilation errors.
type UnsafePageServer interface {
	mustEmbedUnimplementedPageServer()
}

func RegisterPageServer(s grpc.ServiceRegistrar, srv PageServer) {
	s.RegisterService(&Page_ServiceDesc, srv)
}

func _Page_PublishSuperPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServer).PublishSuperPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpage.Page/PublishSuperPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServer).PublishSuperPage(ctx, req.(*SuperPage))
	}
	return interceptor(ctx, in, info, handler)
}

// Page_ServiceDesc is the grpc.ServiceDesc for Page service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Page_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webpage.Page",
	HandlerType: (*PageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishSuperPage",
			Handler:    _Page_PublishSuperPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/webpage.proto",
}

// ManageInstanceClient is the client API for ManageInstance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageInstanceClient interface {
	ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Project, error)
	InstanceList(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Instances, error)
	InstanceDetail(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*Instance, error)
}

type manageInstanceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageInstanceClient(cc grpc.ClientConnInterface) ManageInstanceClient {
	return &manageInstanceClient{cc}
}

func (c *manageInstanceClient) ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/webpage.ManageInstance/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInstanceClient) InstanceList(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Instances, error) {
	out := new(Instances)
	err := c.cc.Invoke(ctx, "/webpage.ManageInstance/InstanceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageInstanceClient) InstanceDetail(ctx context.Context, in *Instance, opts ...grpc.CallOption) (*Instance, error) {
	out := new(Instance)
	err := c.cc.Invoke(ctx, "/webpage.ManageInstance/InstanceDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageInstanceServer is the server API for ManageInstance service.
// All implementations must embed UnimplementedManageInstanceServer
// for forward compatibility
type ManageInstanceServer interface {
	ValidateToken(context.Context, *Token) (*Project, error)
	InstanceList(context.Context, *Project) (*Instances, error)
	InstanceDetail(context.Context, *Instance) (*Instance, error)
	mustEmbedUnimplementedManageInstanceServer()
}

// UnimplementedManageInstanceServer must be embedded to have forward compatible implementations.
type UnimplementedManageInstanceServer struct {
}

func (UnimplementedManageInstanceServer) ValidateToken(context.Context, *Token) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedManageInstanceServer) InstanceList(context.Context, *Project) (*Instances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceList not implemented")
}
func (UnimplementedManageInstanceServer) InstanceDetail(context.Context, *Instance) (*Instance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceDetail not implemented")
}
func (UnimplementedManageInstanceServer) mustEmbedUnimplementedManageInstanceServer() {}

// UnsafeManageInstanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageInstanceServer will
// result in compilation errors.
type UnsafeManageInstanceServer interface {
	mustEmbedUnimplementedManageInstanceServer()
}

func RegisterManageInstanceServer(s grpc.ServiceRegistrar, srv ManageInstanceServer) {
	s.RegisterService(&ManageInstance_ServiceDesc, srv)
}

func _ManageInstance_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInstanceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpage.ManageInstance/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInstanceServer).ValidateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInstance_InstanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInstanceServer).InstanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpage.ManageInstance/InstanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInstanceServer).InstanceList(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageInstance_InstanceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageInstanceServer).InstanceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webpage.ManageInstance/InstanceDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageInstanceServer).InstanceDetail(ctx, req.(*Instance))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageInstance_ServiceDesc is the grpc.ServiceDesc for ManageInstance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageInstance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webpage.ManageInstance",
	HandlerType: (*ManageInstanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateToken",
			Handler:    _ManageInstance_ValidateToken_Handler,
		},
		{
			MethodName: "InstanceList",
			Handler:    _ManageInstance_InstanceList_Handler,
		},
		{
			MethodName: "InstanceDetail",
			Handler:    _ManageInstance_InstanceDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/webpage.proto",
}
